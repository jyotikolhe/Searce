/*
You have an empty sequence, and you will be given
queries. Each query is one of these three types:
1 x  -Push the element x into the stack.
2    -Delete the element present at the top of the stack.
3    -Print the maximum element in the stack.

Function Description
Complete the getMax function in the editor below.
getMax has the following parameters:
- string operations[n]: operations as strings
Returns
- int[]: the answers to each type 3 query
Input Format
The first line of input contains an integer,
. The next
lines each contain an above mentioned query.
Constraints
1<=n<=105
1<=x<=109
1<=type<=3


All queries are valid.



Sample Input
STDIN   Function
-----   --------
10      operations[] size n = 10
1 97    operations = ['1 97', '2', '1 20', ....]
2
1 20
2
1 26
1 20
2
3
1 91
3

Sample Output
26
91
******************************************************************** */

Solution:

#include<iostream>
#include<cmath>
#include<cstdio>
#include<vector>
#include<algorithm>
#include<stack>

using namespace std;
int main()
{
stack<int>max;
stack<int>s;
max.push(0);
int n;
cin>>n;       //scanning the how much elements we want from user

while(n--)
{
int a;
cin>>a;
if(a==1)
{
cin>>a;
if(a>=max.top())max.push(a);   
s.push(a);
}
else if(a==2)
{
if(s.top()==max.top())max.pop();
s.pop();
}
else if(a==3)
{
cout<<max.top()<<endl;
}
}
return 0;
}

